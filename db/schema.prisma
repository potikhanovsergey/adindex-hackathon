// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

enum Role {
  USER
  RECRUITER
  ADMIN
}

model RecruiterRequest {
  id Int @id @default(autoincrement())

  userId    Int
  companyId Int

  user    User    @relation(fields: [userId], references: [id])
  company Company @relation(fields: [companyId], references: [id])
}

enum CompanyStatus {
  verified
  unverified
}

model Company {
  id   Int    @id @default(autoincrement())
  name String @unique // Название компании

  status CompanyStatus

  websiteUrl  String?
  email       String?
  telegramId  String?
  phoneNumber String?

  description       String? // Описание компании (RichText)
  recruiters        User[] // Рекрутеры компании (могут создавать курсы, события, вакансии, отправлять приглашения на вакансии, принимать заявки)
  events            Event[] // События, созданные компанией
  vacancies         Vacancy[] // Вакансии, созданные компанией
  userInvitations   UserInvitation[] // Приглашение пользователям по вакансиям
  recruiterRequests RecruiterRequest[] // Заявка пользователя на роль рекрутера компании
}

// Статус для приглашения или заявки по/на вакансию
enum InvitationRequestStatus {
  OPENED // Приглашение или заявка отправлены
  REJECTED // Приглашение или заявка отклонены
  ACCEPTED // Приглашение или заявка приняты
}

// Компания может пригласить пользователя на вакансию
model UserInvitation {
  id Int @id @default(autoincrement())

  status InvitationRequestStatus @default(OPENED)

  message String // Компания должна что-то написать пользователю при приглашении

  userId    Int
  companyId Int
  vacancyId Int

  user    User    @relation(fields: [userId], references: [id])
  company Company @relation(fields: [companyId], references: [id])
  vacancy Vacancy @relation(fields: [vacancyId], references: [id])
}

// Юзер может отправить заявку на вакансию
model UserVacancyRequest {
  id Int @id @default(autoincrement())

  userId    Int
  vacancyId Int

  cv     String? // Сопроводительное письмо, пользователь может не отправлять его, RichText
  status InvitationRequestStatus @default(OPENED) // Компания может обновлять этот статус на принятый/отклоненный

  companyAnswerMessage String? // Компания, обновляя статус, должна дать сообщение ответа

  user    User    @relation(fields: [userId], references: [id])
  vacancy Vacancy @relation(fields: [vacancyId], references: [id])
}

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  firstName      String
  lastName       String
  patronymic     String? // отчество пользователя
  email          String   @unique
  hashedPassword String?
  role           Role     @default(USER)

  companyId          Int? // Если юзер относится к компании, он становится рекрутером компании
  company            Company?               @relation(fields: [companyId], references: [id])
  tokens             Token[]
  sessions           Session[]
  courseStepStatuses UserCourseStepStatus[] // Шаги курсов, которые прошел юзер
  enrollments        CourseEnrollment[] // Записи юзера на курсы
  events             EventEnrollment[]
  invitations        UserInvitation[]
  requests           UserVacancyRequest[]
  recruiterRequests  RecruiterRequest[] // Заявка юзера на возможность стать рекрутером компании
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

// Траектория, или Flow
model Flow {
  id Int @id @default(autoincrement())

  visible Boolean @default(false)

  edges Edge[]
  nodes Node[]

  vacancyId Int     @unique
  vacancy   Vacancy @relation(fields: [vacancyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//  Связь между узлами траектории
model Edge {
  id Int @id @default(autoincrement())

  connectionId String
  source       String
  target       String

  flowId Int
  flow   Flow @relation(fields: [flowId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Node {
  id Int @id @default(autoincrement())

  nodeId Int
  x      Float
  y      Float

  courseId Int
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  flowId   Int
  flow     Flow   @relation(fields: [flowId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum VacancyStatus {
  OPENED // Видна всем пользователям, можно подать заявку
  HIDDEN // Не видна никому, кроме компании. Нельзя подать заявку
  ARCHIVED // Видна всем пользователям, нельзя подать заявку
}

model Vacancy {
  id    Int    @id @default(autoincrement())
  title String

  description String
  salary      Float?

  status VacancyStatus @default(OPENED)

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  flow            Flow?
  tags            VacancyTagLink[]
  userInvitations UserInvitation[]
  userRequests    UserVacancyRequest[]
}

model VacancyTagLink {
  vacancyId Int
  tagId     Int

  power Int?

  tag     Tag     @relation(fields: [tagId], references: [id])
  vacancy Vacancy @relation(fields: [vacancyId], references: [id])

  @@id([vacancyId, tagId])
}

model TagCategory {
  id   Int    @id @default(autoincrement())
  name String @unique

  tags Tag[]
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  categoryId Int?
  category   TagCategory? @relation(fields: [categoryId], references: [id])

  courses   CourseTagLink[] // Курсы, у которых есть тег
  events    EventTagLink[] // События, у которых есть тег
  vacancies VacancyTagLink[] // Вакансии, у которых есть тег
}

model CourseTagLink {
  courseId Int
  tagId    Int

  power Int

  tag    Tag    @relation(fields: [tagId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@id([courseId, tagId])
}

model Course {
  id Int @id @default(autoincrement())

  name             String
  shortDescription String
  previewImageUrl  String?
  demoVideoUrl     String?

  description String?

  sections    CourseSection[]
  enrollments CourseEnrollment[]
  flowNodes   Node[] // Узлы траектории, которые отсылают к этому курсу
  tags        CourseTagLink[]
}

model EventTagLink {
  eventId Int
  tagId   Int

  power Int

  tag   Tag   @relation(fields: [tagId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@id([eventId, tagId])
}

model EventEnrollment {
  userId  Int
  eventId Int

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, eventId])
}

model Event {
  id Int @id @default(autoincrement())

  name            String
  previewImageUrl String?
  date            DateTime
  description     String

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  websiteUrl  String?
  tags        EventTagLink[]
  enrollments EventEnrollment[]
}

model CourseEnrollment {
  userId   Int
  courseId Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, courseId])
}

model CourseSection {
  id Int @id @default(autoincrement())

  title String
  index Float

  courseId Int
  course   Course       @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  steps    CourseStep[]
}

model CourseStep {
  id Int @id @default(autoincrement())

  index    Float
  title    String
  duration Int

  type CourseStepType

  sectionId Int
  section   CourseSection          @relation(fields: [sectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  statuses  UserCourseStepStatus[]

  contentText  CourseStepContentText?
  contentVideo CourseStepContentVideo?
}

model CourseStepContentVideo {
  id Int @id @default(autoincrement())

  url String

  courseStepId Int        @unique
  courseStep   CourseStep @relation(fields: [courseStepId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model CourseStepContentText {
  id Int @id @default(autoincrement())

  text String

  courseStepId Int        @unique
  courseStep   CourseStep @relation(fields: [courseStepId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum CourseStepType {
  text
  video
  test
  review
}

model CourseStepResource {
  id Int @id @default(autoincrement())

  name String
  link String

  type String
}

model UserCourseStepStatus {
  userId       Int
  courseStepId Int

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseStep CourseStep @relation(fields: [courseStepId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, courseStepId])
}
